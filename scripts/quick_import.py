#!/usr/bin/env python3
"""
Script r√°pido para importar datos iniciales
Versi√≥n simplificada del importador para casos de uso b√°sicos
"""

import os
import sys
import json
import asyncio
from pathlib import Path

# Agregar el directorio del proyecto al path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

try:
    from motor.motor_asyncio import AsyncIOMotorClient
    from app.config import settings
except ImportError:
    print("‚ùå Error: No se pudo importar las dependencias del proyecto")
    sys.exit(1)

async def quick_import(backup_file: str, mongodb_url: str = None, database_name: str = None):
    """Importaci√≥n r√°pida de datos"""
    
    # Configuraci√≥n por defecto
    mongodb_url = mongodb_url or settings.mongodb_url
    database_name = database_name or settings.database_name
    
    print(f"üöÄ Importaci√≥n r√°pida iniciada...")
    print(f"üìÅ Archivo: {backup_file}")
    print(f"üîó MongoDB: {mongodb_url}")
    print(f"üóÑÔ∏è  Base de datos: {database_name}")
    
    try:
        # Conectar a MongoDB
        client = AsyncIOMotorClient(mongodb_url)
        db = client[database_name]
        
        # Verificar conexi√≥n
        await client.admin.command('ping')
        print("‚úÖ Conexi√≥n establecida")
        
        # Cargar archivo JSON
        with open(backup_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # Determinar estructura del archivo
        if "metadata" in data and "data" in data:
            # Formato de backup completo
            collections_data = data["data"]
            print("üìä Formato de backup completo detectado")
        else:
            # Formato directo
            collections_data = data
            print("üìä Formato directo detectado")
        
        # Importar cada colecci√≥n
        total_imported = 0
        for collection_name, documents in collections_data.items():
            if isinstance(documents, list) and documents:
                # Limpiar colecci√≥n existente
                await db[collection_name].delete_many({})
                
                # Insertar documentos
                await db[collection_name].insert_many(documents)
                total_imported += len(documents)
                print(f"‚úÖ {collection_name}: {len(documents)} documentos")
        
        print(f"\nüéâ Importaci√≥n completada: {total_imported} documentos importados")
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False
    finally:
        client.close()
    
    return True

def main():
    """Funci√≥n principal"""
    if len(sys.argv) < 2:
        print("Uso: python quick_import.py <archivo_backup.json>")
        print("Ejemplo: python quick_import.py backup_sistema_contable_2025-09-30.json")
        sys.exit(1)
    
    backup_file = sys.argv[1]
    
    if not os.path.exists(backup_file):
        print(f"‚ùå Archivo no encontrado: {backup_file}")
        sys.exit(1)
    
    print("üè¶ Sistema Contable Ecuador - Importaci√≥n R√°pida")
    print("=" * 50)
    
    # Ejecutar importaci√≥n
    success = asyncio.run(quick_import(backup_file))
    
    if success:
        print("‚úÖ ¬°Importaci√≥n exitosa!")
        sys.exit(0)
    else:
        print("‚ùå Importaci√≥n fall√≥")
        sys.exit(1)

if __name__ == "__main__":
    main()


